x-logging: &default-logging
  options:
    max-size: "50m"

volumes:
  postgres-validator-volume:
  redis-validator-volume:
  prisma-pip-cache:
  prisma-binary:

networks:
  dojo-validator:
    driver: bridge

services:
  # ============== COMMON SERVICES ============== #
  redis-service:
    image: redis/redis-stack-server:7.4.0-v0
    env_file:
      - .env.validator
    expose:
      - 6379
    volumes:
      - redis-validator-volume:/data
    networks:
      - dojo-validator
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    logging: *default-logging

  synthetic-api:
    image: ghcr.io/tensorplex-labs/dojo-synthetic-api:main
    env_file:
      - .env.validator
    environment:
      # leave env vars that'll never change down here, don't source any env vars
      # here because we're not looking in .env and variable substitution will
      # happen too early
      - REDIS_HOST=redis-service
      - REDIS_PORT=6379
      - REDIS_DB=0
    expose:
      - 5003
    networks:
      - dojo-validator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://synthetic-api:5003/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      redis-service:
        condition: service_healthy
    # allow docker commands inside container
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    logging: *default-logging

  postgres-vali:
    image: postgres:15.7
    env_file:
      - .env.validator
    # looks strange, but double $ (i.e. $$) for variable substitution
    command: >
      bash -c "
        export POSTGRES_USER=$${DB_USERNAME}
        export POSTGRES_PASSWORD=$${DB_PASSWORD}
        export POSTGRES_DB=$${DB_NAME}
        docker-entrypoint.sh postgres
      "
    expose:
      - 5432
    volumes:
      - postgres-validator-volume:/var/lib/postgresql/data
    networks:
      - dojo-validator
    healthcheck:
      test:
        # looks strange, but double $ (i.e. $$) for variable substitution
        ["CMD-SHELL", "pg_isready -h postgres-vali -U $${DB_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    logging: *default-logging

  prisma-setup-vali:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./docker/Dockerfile.validator.prisma
    env_file:
      - .env.validator
    working_dir: /app
    volumes:
      - prisma-pip-cache:/root/.cache/pip
      - prisma-binary:/root/prisma-python
      - ./:/app
    networks:
      - dojo-validator
    depends_on:
      - postgres-vali
    logging: *default-logging

  validator:
    image: ghcr.io/tensorplex-labs/dojo:main
    working_dir: /app
    env_file:
      - .env.validator
    volumes:
      - ./:/app
      - ./.env.validator:/app/.env
      - $HOME/.bittensor:/root/.bittensor
      - prisma-binary:/root/prisma-python
    command: ["validator"]
    networks:
      - dojo-validator
    depends_on:
      synthetic-api:
        condition: service_healthy
      postgres-vali:
        condition: service_healthy
      prisma-setup-vali:
        condition: service_completed_successfully
    logging: *default-logging
