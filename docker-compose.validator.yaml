volumes:
  postgres-volume:
  redis-volume:
  testnet-lite-volume:
  dojo-pip-cache:
  prisma-pip-cache:
  postgres-validator-volume:
  prisma-binary:

networks:
  external:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
  internal:
    driver: bridge

services:
  # ============== COMMON SERVICES ============== #
  redis-service:
    image: redis/redis-stack-server:7.4.0-v0
    env_file:
      - .env.validator
    expose:
      - 6379
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis-volume:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  synthetic-api:
    image: ghcr.io/tensorplex-labs/dojo-synthetic-api:dev
    env_file:
      - .env.validator
    environment:
      - REDIS_HOST=redis-service
      - REDIS_PORT=6379
      - REDIS_DB=0
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    ports:
      - "127.0.0.1:5003:5003"
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      redis-service:
        condition: service_healthy

  postgres-vali:
    image: postgres:15.7
    env_file:
      - .env.validator
    # looks strange, but double $ (i.e. $$) for variable substitution
    command: >
      bash -c "
        export POSTGRES_USER=$${DB_USERNAME_VALIDATOR}
        export POSTGRES_PASSWORD=$${DB_PASSWORD_VALIDATOR}
        export POSTGRES_DB=$${DB_NAME_VALIDATOR}
        docker-entrypoint.sh postgres
      "
    expose:
      - 5432
    ports:
      - "5432:5432"
    volumes:
      - postgres-validator-volume:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test:
        # looks strange, but double $ (i.e. $$) for variable substitution
        [
          "CMD-SHELL",
          "pg_isready -h postgres-vali -U $${DB_USERNAME_VALIDATOR}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  prisma-setup-vali:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./docker/Dockerfile.validator.prisma
    env_file:
      - .env.validator
    working_dir: /app
    volumes:
      - prisma-pip-cache:/root/.cache/pip
      - prisma-binary:/root/prisma-python
      - ./:/app
    networks:
      - internal
    depends_on:
      - postgres-vali

  btcli:
    # TODO @dev change back after testing
    image: ghcr.io/tensorplex-labs/dojo:dev
    volumes:
      - ./:/app
      - $HOME/.bittensor:/root/.bittensor
      - dojo-pip-cache:/root/.cache/pip
    command: ["btcli"]
    tty: true
    stdin_open: true

  dojo-cli:
    image: ghcr.io/tensorplex-labs/dojo:dev
    volumes:
      - ./:/app
      - $HOME/.bittensor:/root/.bittensor
      - dojo-pip-cache:/root/.cache/pip
    command: ["dojo-cli"]
    tty: true
    stdin_open: true
    networks:
      - internal

  # ============== TEST NET ============== #

  validator-testnet:
    image: ghcr.io/tensorplex-labs/dojo:dev
    working_dir: /app
    env_file:
      - .env.validator
    environment:
      - NETUID=98
      - SUBTENSOR_NETWORK=test
      - SUBTENSOR_ENDPOINT=ws://test.finney.opentensor.ai
      - PRISMA_QUERY_ENGINE_BINARY=/root/prisma-python/node_modules/prisma/query-engine-debian-openssl-3.0.x
    volumes:
      - ./:/app
      - $HOME/.bittensor:/root/.bittensor
      - dojo-pip-cache:/root/.cache/pip
      - prisma-binary:/root/prisma-python
    command: ["validator"]
    networks:
      - internal
      - external
    depends_on:
      synthetic-api:
        condition: service_healthy
      postgres-vali:
        condition: service_healthy
      prisma-setup-vali:
        condition: service_completed_successfully

  # ============== MAIN NET ============== #

  validator-mainnet:
    image: ghcr.io/tensorplex-labs/dojo:main
    working_dir: /app
    env_file:
      - .env.validator
    environment:
      - NETUID=51
      - SUBTENSOR_NETWORK=finney
      - SUBTENSOR_ENDPOINT=***REMOVED***
      - PRISMA_QUERY_ENGINE_BINARY=/root/prisma-python/node_modules/prisma/query-engine-debian-openssl-3.0.x
    volumes:
      - ./:/app
      - $HOME/.bittensor:/root/.bittensor
      - dojo-pip-cache:/root/.cache/pip
      - prisma-binary:/root/prisma-python
    command: ["validator"]
    networks:
      - internal
      - external
    depends_on:
      synthetic-api:
        condition: service_healthy
      postgres-vali:
        condition: service_healthy
      prisma-setup-vali:
        condition: service_completed_successfully
